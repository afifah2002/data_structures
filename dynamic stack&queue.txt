DYNAMIC STACK
#include<stdio.h>
#include<conio.h>
void push();
void pop();
void display();
void peep();
struct node
{
int data;
struct node *next;
};
struct node *top=0;
void main()
{
int ch;
clrscr();
while(1)
{
printf("\n select operation \n 1.push \n 2.pop \n 3. display \n 4.peep \n");
scanf("%d",&ch);
switch(ch)
{
case 1: push();
break;
case 2: pop();
break;
case 3: display();
break;
case 4: peep();
break;
default: printf("\n wrong option ");
}
}

getch();
}
void push()
{   int x;
struct node *newnode;
printf("\n enter the element \n");
scanf("%d",&x);
newnode=( struct node*)malloc(sizeof(struct node));
newnode->data=x;
newnode->next=top;
top=newnode;
}
void display()
{
struct node *temp;
temp=top;
if(top==0)
{
printf("\n underflow ");
return;
}
else
{
while(temp!=0)
{
printf( " %d ",temp->data);
temp=temp->next;
}
}
}
void pop()
{
struct node *temp;
temp=top;
if(top==0)
{
printf("\n underflow ");
return;
}
else
{
printf("\n deleted element : %d ",top->data);
top=top->next;
free(temp);
}
}
void peep()
{
if(top==0)
{
printf("\n underflow ");
return;
}
else
{
printf(" %d ",top->data);
}
}

DYNAMIC QUEUE
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
struct node *front=0;
struct node *rear=0;
void push();
void pop();
void display();
//void peek();
void main()
{
int ch;
clrscr();
while(1)
{
printf("\n enter your choice \n 1.push \n2.pop \n3.display\n4.exit \n");
scanf("%d",&ch);
switch(ch)
{
case 1: push();
break;
case 2: pop();
break;
case 3: display();
break;
case 4: exit(0);
break;
default : printf("\n wrong choice ");
}
}
getch();
}


void push()
{  int x;
struct node *newnode;
printf("\n enter the element \n");
scanf("%d",&x);
newnode= (struct node*)malloc(sizeof(struct node));
newnode->data=x;
newnode->next=0;
if(front==NULL && rear==NULL)
{
front=rear=newnode;
}
else
{
rear->next=newnode;
rear=newnode;
}
}
void pop()
{
struct node *temp;
temp=front;
if(front==0 && rear==0)
{
printf("\n underflow ");
return;
}
 else if(front->next==rear->next)
    {
        printf("\nthe deleted element is %d ",front->data);
        front=0;
        rear=0;
        free(temp);
    }
else
{
printf("\n element deleted is %d ",front->data);
front=front->next;
free(temp);
}
}
void display()
{
struct node *temp;
if(front==0 && rear==0)
{
printf("\n underflow ");
return;
}
else
{
temp=front;
while(temp!=0)
{
printf("\n %d ",temp->data);
temp=temp->next;
}
}
}